---
# Purpose: Install common HBase components and configuration
#
# Notes:
#   - Executed on all servers in the cluster

- name: Create HBase related directories (secure mode)
  file: path={{ item.path }} owner={{ item.owner }} group=hadoop mode={{ item.mode }} recurse=yes state=directory
  with_items:
    - { path: '{{ PATHS_BY_OWNER["hbase"].logs }}', owner: 'hbase', mode: 755 }
    - { path: '{{ PATHS_BY_OWNER["hbase"].pid }}', owner: 'hbase', mode: 755 }
    - { path: '{{ PATHS_BY_OWNER["hbase"].config }}', owner: 'hbase', mode: 775 }
    - { path: '{{ HBASE_TEMP_DIR }}', owner: 'hdfs', mode: 775 }
  when: SECURITY_ENABLED == true

- name: Create HBase related directories (non-secure mode)
  file: path={{ item.path }} owner={{ item.owner }} group=hadoop mode={{ item.mode }} recurse=yes state=directory
  with_items:
    - { path: '{{ PATHS_BY_OWNER["hbase"].logs }}', owner: 'hadoop', mode: 775 }
    - { path: '{{ PATHS_BY_OWNER["hbase"].pid }}', owner: 'hadoop', mode: 775 }
    - { path: '{{ PATHS_BY_OWNER["hbase"].config }}', owner: 'hadoop', mode: 775 }
  when: SECURITY_ENABLED == false

#- name: Download HBase to local machine
#  local_action: get_url url={{ HBASE_DOWNLOAD_LINK }}/{{ HBASE_VERSION }}/hbase-{{ HBASE_VERSION }}-bin.tar.gz dest=downloads
#  when: DOWNLOAD_ONCE

- name: Download HBase
  get_url: url={{ HBASE_DOWNLOAD_LINK }}/{{ HBASE_VERSION }}/hbase-{{ HBASE_VERSION }}-bin.tar.gz dest=/tmp/hbase-{{ HBASE_VERSION }}-bin.tar.gz mode=0644
  when: REMOTE_FETCH_TARBALLS == true

- name: Untar HBase
  unarchive: src=/tmp/hbase-{{ HBASE_VERSION }}-bin.tar.gz dest={{ PACKAGE_BASE }} owner=hadoop group=hadoop copy=no creates={{ PACKAGE_BASE }}/hbase-{{ HBASE_VERSION }}
  when: REMOTE_FETCH_TARBALLS == true

- name: Untar HBase
  unarchive: src=files/downloads/hbase-{{ HBASE_VERSION }}-bin.tar.gz dest={{ PACKAGE_BASE }} owner=hadoop group=hadoop copy=yes creates={{ PACKAGE_BASE }}/hbase-{{ HBASE_VERSION }}
  when: REMOTE_FETCH_TARBALLS == false

- name: Symlink hbase
  file: src={{ PACKAGE_BASE }}/hbase-{{ HBASE_VERSION }} path={{ HBASE_HOME }} state=link owner=hadoop group=hadoop

- name: Put HBase configuration in place
  template: src={{ item.src }} dest={{ item.dest }} owner=hbase group=hadoop mode=0644
  with_items:
    - { src: 'etc/hbase/conf/regionservers.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/regionservers' }
    - { src: 'etc/hbase/conf/backup-masters.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/backup-masters' }
    - { src: 'etc/hbase/conf/hbase-env.sh.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/hbase-env.sh' }
    - { src: 'etc/hbase/conf/hbase-site.xml.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/hbase-site.xml' }
    - { src: 'etc/hbase/conf/hadoop-metrics2-hbase.properties.j2',
        dest: '{{ PATHS_BY_OWNER["hbase"].config }}/hadoop-metrics2-hbase.properties' }
    - { src: 'etc/hbase/conf/hbase-policy.xml.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/hbase-policy.xml' }
    - { src: 'etc/hbase/conf/hbase-jaas.conf.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/hbase-jaas.conf' }
    - { src: 'etc/hbase/conf/log4j.properties.j2', dest: '{{ PATHS_BY_OWNER["hbase"].config }}/log4j.properties' }

- name: Generate key and keystore for HBase table encryption
  command: /usr/bin/keytool -certreq -keystore {{ KEYSTORE_DIR }}/hbase-crypto.jks -storetype jceks -storepass "{{ HBASE_CRYPTO_PASSWORD }}" -genseckey -keyalg AES -keysize 128 -alias hbase
  args:
    creates: "{{ KEYSTORE_DIR }}/hbase-crypto.jks"
  when: SECURITY_ENABLED == true

- name: Set access rights for keystore
  file:
    path={{ KEYSTORE_DIR }}/hbase-crypto.jks
    state=file
    owner=hbase
    group=hadoop
    mode=600
  when: SECURITY_ENABLED == true
