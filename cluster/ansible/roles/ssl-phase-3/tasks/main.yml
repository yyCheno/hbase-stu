---
# Purpose: Signs the TLS/SSL certificates of each server
#
# Notes:
#   - Executed on all master and worker server
#   - This is part III of a three step process:
#     Phase 1) Generate all certs, keystores, and CSRs for every server and process
#     Phase 2) Sign all CSRs with the central CA root certificate
#     Phase 3) Import all signed CSRs and put shared truststore in place

- name: Create final keystore directory in system location (if not already present)
  file:
    path={{ KEYSTORE_DIR }}
    state=directory
    owner=root
    group=root
    mode=755

- name: Copy signed certificate
  copy:
    src=files/tmp/certs/{{ inventory_hostname }}.crt
    dest={{ KEYSTORE_STAGING_DIR }}/{{ inventory_hostname }}.crt
    owner=hadoop
    group=hadoop
    mode=440

- name: Copy public CA root certificate
  copy:
    src=files/tmp/certs/rootCA.pem
    dest={{ KEYSTORE_STAGING_DIR }}
    owner=hadoop
    group=hadoop
    mode=440

- name: Copy shared truststore into final location
  copy:
    src=files/tmp/certs/truststore.jks
    dest={{ KEYSTORE_DIR }}
    owner=hadoop
    group=hadoop
    mode=440

- name: Import root CA certificate into keystore
  command: /usr/bin/keytool -importcert -keystore {{ inventory_hostname }}.jks -alias CARoot -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file rootCA.pem -noprompt
  args:
    chdir: "{{ KEYSTORE_STAGING_DIR }}"
  ignore_errors: yes

- name: Import signed certificate into keystore
  command: /usr/bin/keytool -importcert -keystore {{ inventory_hostname }}.jks -alias {{ inventory_hostname }} -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file {{ inventory_hostname }}.crt -noprompt
  args:
    chdir: "{{ KEYSTORE_STAGING_DIR }}"
  ignore_errors: yes

# Note: We could either add the real name into the ssl-server.xml/ss-client.xml or use the below approach
- name: Copy local keystore into final location
  copy:
    src={{ KEYSTORE_STAGING_DIR }}/{{ inventory_hostname }}.jks
    dest={{ KEYSTORE_DIR }}
    owner=hadoop
    group=hadoop
    mode=440
    remote_src=yes

# Optionally swap in cacerts with self-signed root CA certificate
# - command: rm -rf {{ java_home }}/jre/lib/security/jssecacert
# - command: cp {{ JAVA_HOME }}/jre/lib/security/cacerts {{ JAVA_HOME }}/jre/lib/security/jssecacerts
# - command: "{{ JAVA_HOME }}/bin/keytool -importcert -keystore {{ JAVA_HOME }}/jre/lib/security/jssecacerts -alias CA -storepass changeit -file rootCA.pem -noprompt"
#   args:
#     chdir: "{{ HADOOP_CONFIG }}"

